//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using LitJson;

namespace AssemblyCSharp
{
	public class Models{
		//Private members
		private List<Model> list;
		private int index;

		//Alternative constructor, equivalent to calling new Models(null) or with invalid master object. It'll just make an empty scene if no valid object is found;
		public Models(){
			index = 0;
			UnityEngine.Object[] listObjects;
			ConfNode[] config;

			//Instantiate list
			list = new List<Model>();			
			//Get configuration nodes using litJSON
			config = getConfig();
			
			listObjects = Resources.LoadAll("Objects", typeof(GameObject));
			
			foreach (GameObject listObject in listObjects) {
				Model model;
				//Instantiate game object. Maybe we're just a step away to make this one visible, but I can't find it so just re create it...
				GameObject obj = (GameObject) GameObject.Instantiate (listObject, Vector3.zero, Quaternion.identity);
				
				ConfNode node = Array.Find(config,element=>obj.name.Equals(element.name+"(Clone)",StringComparison.OrdinalIgnoreCase));
				model = new Model(obj,node);
				model.setActive (false);
				list.Add (model);
			}
			if(list.Count>0){
				this.setCurrent(0);
			}
		}

		public Models (GameObject defaultObject):this(){
			if( list.Count == 0 && defaultObject){
				list.Add (new Model((GameObject) GameObject.Instantiate (defaultObject, Vector3.zero, Quaternion.identity)));
				this.setCurrent(0);
			}

		}


		public Model getCurrent(){
			return list[index];
		}
		public void next(){
			this.list[index].setActive(false);
			this.setCurrent(index+1);
		}
		public void setCurrent(int value){

			if(value <list.Count && value >0){
				this.index = value;
			}else{
				this.index = 0;
			}
			this.list[index].setActive(true);
		}

		private ConfNode[] getConfig(){
			return JsonMapper.ToObject<ConfNode[]>(((TextAsset)Resources.Load("config", typeof(TextAsset))).text);
		}

	}
}
