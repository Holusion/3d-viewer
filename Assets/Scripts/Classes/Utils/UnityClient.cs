//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34209
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text;

//For debug purposes
using UnityEngine;

namespace AssemblyCSharp.Utils
{
	/*
	 * Unity engine compatible class that writes data to a socket.
	 * It can be told to accept an answer which will be Enqueued for later processing.
	 * Message queue must be declared on instantiation.
	 */
	public class UnityClient{
		public TcpClient client = null;
		public Queue<string> messages = null;
		public UnityClient (){
			this.client = new TcpClient("127.0.0.1",8080);
		}
		public UnityClient (Queue<string> messageQueue){
			this.client = new TcpClient("127.0.0.1",8080);
			this.messages = messageQueue;
		}

		public void Send (string message){
			this.Send (System.Text.Encoding.ASCII.GetBytes(message),false);
		}
		public void Send (byte[] message){
			this.Send (message,false);
		}
		public void Send (string message,bool expectAnswer){
			this.Send (System.Text.Encoding.ASCII.GetBytes(message),expectAnswer);
		}
		public void Send (byte[] message, bool expectAnswer){
			ClientData cli = new ClientData(client);
			NetworkStream stream = this.client.GetStream();
			stream.Write(message, 0, message.Length);
			if(!expectAnswer ||messages==null){
				stream.Close();         
				client.Close();
			}else{
				stream.BeginRead(cli.data, 0, cli.data.Length, new AsyncCallback(ReadCallBack),  cli);  
			}
		}
		public void ReadCallBack(IAsyncResult ar ){

			ClientData cli = (ClientData)ar.AsyncState;

			NetworkStream stream = cli.Client.GetStream();

			int bytesCount = stream.EndRead(ar);

			messages.Enqueue(  Encoding.ASCII.GetString(cli.data, 0, bytesCount));
			stream.Close();
			cli.Client.Close();
		}
	}
}

