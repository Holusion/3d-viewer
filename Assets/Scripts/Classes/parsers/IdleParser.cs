//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
		public class IdleParser:BaseParser {
			
			private Models models;
			public IdleParser (Models models){
				this.models = models;
				//pos = Input.mousePosition;
			}
			//Call update with default 2second inactive time. 
			public override bool update() {
				return this.update (2f);
			}

			public bool update(float timeInactive){
				Vector3 rot;
				Model model = models.getCurrent();
				//Rotate until rotation = Quaternion.identity.
				
				rot =  getDesiredRotationSpeed(model);
				model.setRotation(rot);
				
				return true;
			}


			private Vector3 getDesiredRotationSpeed (Model model){
				Vector3 currentAngle = model.getRotation();
				Vector3 newRot = new Vector3(parseAngle(currentAngle.x),0.2f,parseAngle(currentAngle.z));

				return newRot;

				
			}
			private float parseAngle(float baseAngle){
				float res;
				if(baseAngle <4 ||baseAngle>356){
					return 0;
				}else if(baseAngle <180){
					return -baseAngle*(1-(float)Math.Exp(-baseAngle))*0.02f;	
				}else{
					return (360-baseAngle)*(1-(float)Math.Exp(-(360-baseAngle)))*0.02f;	
				}
			}
		}
}
	

